name: Deploy to EC2 via ECR

on:
  push:
    branches: [dev]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout source
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push Docker image to ECR
      run: |
        IMAGE_URI="${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPOSITORY }}:latest"
        docker build -t $IMAGE_URI .
        docker push $IMAGE_URI

    - name: Deploy on EC2
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_KEY }}
        script: |
          IMAGE="${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPOSITORY }}:latest"
          CONTAINER="${{ secrets.ECR_REPOSITORY }}"
          
          echo "Installing required tools..."
          sudo apt update
          sudo apt install -y unzip curl
          
          echo "Installing AWS CLI v2..."
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install
          rm -rf awscliv2.zip aws
          
          echo "Configuring AWS credentials..."
          mkdir -p ~/.aws
          cat > ~/.aws/credentials << EOF
          [default]
          aws_access_key_id = ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_access_key = ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          region = ${{ secrets.AWS_REGION }}
          EOF
          
          echo "Logging into ECR..."
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ steps.login-ecr.outputs.registry }}
          echo "Pulling image: $IMAGE"
          docker pull $IMAGE
          echo "Stopping and removing existing container..."
          docker stop $CONTAINER || true && docker rm $CONTAINER || true
          echo "Running new container..."
          docker run -d -p 80:80 --name $CONTAINER $IMAGE
          echo "Setting restart policy..."
          docker update --restart unless-stopped $CONTAINER
          echo "Checking container status..."
          docker ps
          echo "Container logs:"
          docker logs $CONTAINER